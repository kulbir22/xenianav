apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"
//googleServices.disableVersionCheck = true

import com.android.build.OutputFile

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node-modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node-modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}
/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false
/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false
/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

 /* Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */

android {
    compileSdkVersion 31
    ndkVersion '24.0.8215888'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions { 

        checkReleaseBuilds false

    }
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
    namespace "com.xenia"
    defaultConfig {
        applicationId "com.xenia"
        minSdkVersion 21
        targetSdkVersion 31
        missingDimensionStrategy 'react-native-camera', 'general'
        versionCode 61
        versionName '2.5.6'
        multiDexEnabled true
    }
    // dexOptions {
    //     javaMaxHeapSize "4g"
    //     jumboMode = true
    // }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('xenia.keystore')
            storePassword 'Power@e202#'
            keyAlias 'xenia'
            keyPassword 'Power@e202#'
        }
        release {
            storeFile file(MYAPP_UPLOAD_STORE_FILE)
            storePassword MYAPP_UPLOAD_STORE_PASSWORD
            keyAlias MYAPP_UPLOAD_KEY_ALIAS
            keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            // if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
            //     storeFile file(MYAPP_UPLOAD_STORE_FILE)
            //     storePassword MYAPP_UPLOAD_STORE_PASSWORD
            //     keyAlias MYAPP_UPLOAD_KEY_ALIAS
            //     keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            // }
        }
    }
    buildToolsVersion '33.0.2'
    //flavorDimensions
    buildTypes {
        mySpecialRelease{
            matchingFallbacks = ['release', 'debug']
        }
        debug {
            signingConfig signingConfigs.debug
        }
        release {

            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.release
            //shrinkResources true
            //debuggable true
            //minifyEnabled enableProguardInReleaseBuilds
            //proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
     //applicationVariants are e.g. debug, release
    // applicationVariants.all { variant ->
    //     variant.outputs.each { output ->
    //         //def file = output.OutputFile
    //         def file = output.getFilter(OutputFile.ABI)
    //         file = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
    //     }
    // }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation ("androidx.appcompat:appcompat:1.3.1") {
        version {
            strictly '1.3.1'
        }
    }
    // implementation 'com.apollographql.apollo:apollo-runtime:1.0.2-alpha2'
    //implementation platform('com.google.firebase:firebase-bom:26.3.0')
    //implementation 'com.google.firebase:firebase-analytics'
    //implementation project(':@react-native-community_async-storage')
    //implementation "com.android.support:appcompat-v7:28.0.0"
    //implementation project(':@mauron85_react-native-background-geolocation')
    // implementation files('libs/mylib-release-1.13.aar')
    implementation project(':bugsnag-react-native')
    //implementation project(':react-native-community-geolocation')
    implementation project(':react-native-push-notification')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-image-picker')
    implementation("com.facebook.react:react-android")
    // implementation project(':react-native-maps')
    implementation "androidx.annotation:annotation:1.1.0"
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-background-downloader')
    // implementation 'com.tonyodev.fetch2:fetch2:3.0.11-preview2'
    implementation 'androidx.tonyodev.fetch2:xfetch2:3.1.5-preview2'
    implementation 'com.facebook.fresco:animated-gif:2.0.0';
    //implementation 'com.google.android.gms:play-services-base:18.0.1'
//    implementation 'com.google.android.gms:play-services-location:15.0.1'
    //implementation 'com.google.android.gms:play-services-maps:18.0.2'
    // implementation project(':react-native-html-to-pdf')
    implementation 'com.google.firebase:firebase-analytics:20.1.0'
    // implementation "com.google.firebase:firebase-core:17.2.2"
    implementation "com.google.firebase:firebase-messaging:23.0.0"
    implementation "com.google.firebase:firebase-database:20.0.3"
    //implementation 'com.google.android.gms:play-services-vision:17.0.0'
    //implementation 'com.google.firebase:firebase-installations:16.3.5'
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar' // <-- Add this line if you wish to use badge on Android
    implementation 'com.android.support:multidex:1.0.3'
    // implementation project(':react-native-android-location-enabler')
    //implementation project(':PDFView')
    implementation project(':react-native-fs')
    implementation project(':react-native-pdf-lib')
    implementation 'com.google.firebase:firebase-firestore:24.0.1'
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); 
applyNativeModulesAppBuildGradle(project)
